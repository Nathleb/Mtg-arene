{"version":3,"sources":["../../src/queryparsers/parsers.js"],"names":["module","exports","parseColorId","colorId","query","color_identity","exists","test","$or","$not","$elemMatch","$nin","slice","split","$size","length","$all","parseType","types","type_line","regexTypesArray","reduce","acc","cur","push","RegExp","parseCmc","cmc","$lte","parseInt","$lt","$gte","$gt","parseEdhrecRank","edhrecRank","edhrec_rank"],"mappings":"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","sourcesContent":["module.exports = {\n\tparseColorId: function (colorId) {\n\t\tlet query = {};\n\t\tif (!colorId) return { color_identity: { exists: true } };\n\t\tswitch (true) {\n\t\t\tcase /^lte/.test(colorId):\n\t\t\t\tquery = {\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolor_identity: {\n\t\t\t\t\t\t\t\t$not: {\n\t\t\t\t\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t\t\t\t\t$nin: colorId.slice(3).split(\"\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ color_identity: { $size: 0 } },\n\t\t\t\t\t],\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase colorId === \"c\":\n\t\t\t\tquery = {\n\t\t\t\t\tcolor_identity: { $size: 0 },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tquery = {\n\t\t\t\t\tcolor_identity: {\n\t\t\t\t\t\t$size: colorId.split(\"\").length,\n\t\t\t\t\t\t$all: colorId.split(\"\"),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t\treturn query;\n\t},\n\n\tparseType: function (types) {\n\t\tif (!types) return { type_line: { exists: true } };\n\t\tlet regexTypesArray = types.split(\" \").reduce((acc, cur) => {\n\t\t\tacc.push(new RegExp(cur, \"i\"));\n\t\t\treturn acc;\n\t\t}, []);\n\t\tlet query = {\n\t\t\ttype_line: {\n\t\t\t\t$all: regexTypesArray,\n\t\t\t},\n\t\t};\n\t\treturn query;\n\t},\n\n\tparseCmc: function (cmc) {\n\t\tif (!cmc) return { cmc: { exists: true } };\n\t\tlet query;\n\t\tswitch (true) {\n\t\t\tcase /^lte/.test(cmc):\n\t\t\t\tquery = {\n\t\t\t\t\tcmc: { $lte: parseInt(cmc.slice(3), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase /^lt/.test(cmc):\n\t\t\t\tquery = {\n\t\t\t\t\tcmc: { $lt: parseInt(cmc.slice(2), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase /^gte/.test(cmc):\n\t\t\t\tquery = {\n\t\t\t\t\tcmc: { $gte: parseInt(cmc.slice(3), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase /^gt/.test(cmc):\n\t\t\t\tquery = {\n\t\t\t\t\tcmc: { $gt: parseInt(cmc.slice(2), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tquery = {\n\t\t\t\t\tcmc: parseInt(cmc, 10),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t\treturn query;\n\t},\n\n\tparseEdhrecRank: function (edhrecRank) {\n\t\tif (!edhrecRank) return {};\n\t\tlet query;\n\t\tswitch (true) {\n\t\t\tcase /^lte/.test(edhrecRank):\n\t\t\t\tquery = {\n\t\t\t\t\tedhrec_rank: { $lte: parseInt(edhrecRank.slice(3), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase /^lt/.test(edhrecRank):\n\t\t\t\tquery = {\n\t\t\t\t\tedhrec_rank: { $lt: parseInt(edhrecRank.slice(2), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase /^gte/.test(edhrecRank):\n\t\t\t\tquery = {\n\t\t\t\t\tedhrec_rank: { $gte: parseInt(edhrecRank.slice(3), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase /^gt/.test(edhrecRank):\n\t\t\t\tquery = {\n\t\t\t\t\tedhrec_rank: { $gt: parseInt(edhrecRank.slice(2), 10) },\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tquery = {\n\t\t\t\t\tedhrec_rank: parseInt(edhrecRank, 10),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t\treturn query;\n\t},\n};\n"],"file":"parsers.js"}